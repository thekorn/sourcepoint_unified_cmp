// Mocks generated by Mockito 5.4.4 from annotations
// in sourcepoint_unified_cmp_android/test/sourcepoint_unified_cmp_android_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:sourcepoint_unified_cmp_android/src/messages.g.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHostAPISPConsent_0 extends _i1.SmartFake
    implements _i2.HostAPISPConsent {
  _FakeHostAPISPConsent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SourcepointUnifiedCmpHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSourcepointUnifiedCmpHostApi extends _i1.Mock
    implements _i2.SourcepointUnifiedCmpHostApi {
  @override
  String get pigeonVar_messageChannelSuffix => (super.noSuchMethod(
        Invocation.getter(#pigeonVar_messageChannelSuffix),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#pigeonVar_messageChannelSuffix),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#pigeonVar_messageChannelSuffix),
        ),
      ) as String);

  @override
  _i4.Future<_i2.HostAPISPConsent> loadMessage({
    required int? accountId,
    required int? propertyId,
    required String? propertyName,
    required String? pmId,
    required _i2.HostAPIMessageLanguage? messageLanguage,
    required _i2.HostAPICampaignsEnv? campaignsEnv,
    required int? messageTimeout,
    required bool? runGDPRCampaign,
    required bool? runCCPACampaign,
    required bool? runUSNATCampaign,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMessage,
          [],
          {
            #accountId: accountId,
            #propertyId: propertyId,
            #propertyName: propertyName,
            #pmId: pmId,
            #messageLanguage: messageLanguage,
            #campaignsEnv: campaignsEnv,
            #messageTimeout: messageTimeout,
            #runGDPRCampaign: runGDPRCampaign,
            #runCCPACampaign: runCCPACampaign,
            #runUSNATCampaign: runUSNATCampaign,
          },
        ),
        returnValue:
            _i4.Future<_i2.HostAPISPConsent>.value(_FakeHostAPISPConsent_0(
          this,
          Invocation.method(
            #loadMessage,
            [],
            {
              #accountId: accountId,
              #propertyId: propertyId,
              #propertyName: propertyName,
              #pmId: pmId,
              #messageLanguage: messageLanguage,
              #campaignsEnv: campaignsEnv,
              #messageTimeout: messageTimeout,
              #runGDPRCampaign: runGDPRCampaign,
              #runCCPACampaign: runCCPACampaign,
              #runUSNATCampaign: runUSNATCampaign,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.HostAPISPConsent>.value(_FakeHostAPISPConsent_0(
          this,
          Invocation.method(
            #loadMessage,
            [],
            {
              #accountId: accountId,
              #propertyId: propertyId,
              #propertyName: propertyName,
              #pmId: pmId,
              #messageLanguage: messageLanguage,
              #campaignsEnv: campaignsEnv,
              #messageTimeout: messageTimeout,
              #runGDPRCampaign: runGDPRCampaign,
              #runCCPACampaign: runCCPACampaign,
              #runUSNATCampaign: runUSNATCampaign,
            },
          ),
        )),
      ) as _i4.Future<_i2.HostAPISPConsent>);

  @override
  _i4.Future<void> loadPrivacyManager({
    required String? pmId,
    required _i2.HostAPIPMTab? pmTab,
    required _i2.HostAPICampaignType? campaignType,
    required _i2.HostAPIMessageType? messageType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadPrivacyManager,
          [],
          {
            #pmId: pmId,
            #pmTab: pmTab,
            #campaignType: campaignType,
            #messageType: messageType,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
